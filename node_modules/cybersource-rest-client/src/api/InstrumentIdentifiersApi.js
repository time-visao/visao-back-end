/**
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/InlineResponse400', 'model/TmsV1InstrumentidentifiersPost200Response'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/InlineResponse400'), require('../model/TmsV1InstrumentidentifiersPost200Response'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.InstrumentIdentifiersApi = factory(root.CyberSource.ApiClient, root.CyberSource.Body, root.CyberSource.InlineResponse400, root.CyberSource.TmsV1InstrumentidentifiersPost200Response);
  }
}(this, function(ApiClient, Body, InlineResponse400, TmsV1InstrumentidentifiersPost200Response) {
  'use strict';

  /**
   * InstrumentIdentifiers service.
   * @module api/InstrumentIdentifiersApi
   * @version 0.0.1
   */

  /**
   * Constructs a new InstrumentIdentifiersApi. 
   * @alias module:api/InstrumentIdentifiersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(configObject, apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    this.apiClient.setConfiguration(configObject);


    /**
     * Callback function to receive the result of the tmsV1InstrumentidentifiersPost operation.
     * @callback module:api/InstrumentIdentifiersApi~tmsV1InstrumentidentifiersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TmsV1InstrumentidentifiersPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Instrument Identifier
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {module:model/Body} body Please specify either a Card or Bank Account.
     * @param {module:api/InstrumentIdentifiersApi~tmsV1InstrumentidentifiersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TmsV1InstrumentidentifiersPost200Response}
     */
    this.tmsV1InstrumentidentifiersPost = function(profileId, body, callback) {
      var postBody = body;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling tmsV1InstrumentidentifiersPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tmsV1InstrumentidentifiersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = TmsV1InstrumentidentifiersPost200Response;

      return this.apiClient.callApi(
        '/tms/v1/instrumentidentifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
